// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  categories     Category[]
  transactions   Transaction[]
  savingsGoals   SavingsGoal[]
  monthlyBudgets MonthlyBudget[]

  @@map("users")
}

model Category {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  type      String
  color     String   @default("#3B82F6")
  icon      String?
  createdAt DateTime @default(now())

  // Relaciones
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets      MonthlyBudget[]

  @@map("categories")
}

model Transaction {
  id          Int      @id @default(autoincrement())
  userId      Int
  categoryId  Int?
  amount      Float
  description String?
  type        String
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("transactions")
}

model SavingsGoal {
  id            Int      @id @default(autoincrement())
  userId        Int
  name          String
  targetAmount  Float
  currentAmount Float @default(0)
  targetDate    DateTime?
  isAchieved    Boolean  @default(false)
  createdAt     DateTime @default(now())

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("savings_goals")
}

model MonthlyBudget {
  id            Int     @id @default(autoincrement())
  userId        Int
  categoryId    Int
  month         Int
  year          Int
  budgetAmount  Float
  spentAmount   Float @default(0)
  createdAt     DateTime @default(now())

  // Relaciones
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId, month, year])
  @@map("monthly_budgets")
}

